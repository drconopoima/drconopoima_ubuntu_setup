#!/usr/bin/env bash
# drconopoima_ubuntu_setup (v1.2.0)
# Quick from scratch setup script of an Ubuntu machine
# Optional Dependency: Auxiliary vimrc/bashrc/bash_aliases accompanying files
# set -n
set -Eeuo pipefail
# Sourced from `man bash`
# set -E | set -o errtrace:  If set, any trap on ERR is inherited by shell functions
# set -u | set -o nounset: Treat unset variables and parameters (except "@" and "*") as an  error  when performing parameter expansion.
# set -e | set -o errexit: Exit immediately if a pipeline, a list, or  a  compound  command, exits with a non-zero status.
# set -o pipefail: If set, the return value of a pipeline is the value of the last command to exit with a non-zero status, or zero if all exit successfully.
# set -C | set -o noclubber: If set, bash does not overwrite an existing file with the >, >&,  and  <>  redirection operators. Overriden by >|
# Debugging flags:
# set -n | set -o noexec: Read  commands  but do not execute them. This may be used to check for syntax errors
# set -x | set -o xtrace: After  expanding  each command, display the value of PS4, followed by the command and its expanded arguments

# Additional ideas on bash scripting robustness:
# * David Phasley: https://www.davidpashley.com/articles/writing-robust-shell-scripts/
# * Tom Van Eyck: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/

readonly SCRIPT_NAME="$0"
readonly SCRIPT_VERSION='1.2.0'

script_name() {
    printf "${SCRIPT_NAME}: (v${SCRIPT_VERSION})\n"
}

readonly -f script_name

script_name

# Section CONSTANTS

readonly DEFAULT_PACKAGES_TO_INSTALL="curl wget vim-gtk3 neovim bat ufw git make \
build-essential default-jdk default-jre bleachbit vlc flatpak \
glances atop libssl-dev zlib1g-dev libbz2-dev libreadline-dev \
libsqlite3-dev llvm libncurses5-dev libncursesw5-dev xz-utils libffi-dev \
liblzma-dev python-openssl virtualbox vagrant virtualbox-ext-pack krita ibus \
netcat-openbsd snapd libnotify-bin hwinfo tcpdump gawk fonts-opensymbol \
kubuntu-restricted-extras kubuntu-restricted-addons kubuntu-wallpapers \
plasma-workspace-wallpapers coreutils apt-file telnet openssh-client \
openssh-server gpg net-tools exfat-fuse exfat-utils jq tmux maven sqlite3 \
lsof colormake most nocache jpegoptim mmv qpdf rename pgadmin3 postgresql \
asciinema fail2ban dsniff ecryptfs-utils cryptsetup mariadb-server mariadb-client \
zsh autojump dolphin-plugins postgresql-contrib openjdk-8-jre mesa-utils \
rtl8821ce-dkms bc module-assistant tldr fd-find imagemagick source-highlight \
command-not-found tree ncdu fzf"

readonly DEFAULT_SNAP_PACKAGES_INSTALL_CLASSIC="helm"
readonly DEFAULT_SNAP_PACKAGES_INSTALL=""
readonly DEFAULT_FLATPAK_PACKAGES_INSTALL="org.libreoffice.LibreOffice"

DEFAULT_PACKAGES_TO_REMOVE="gstreamer1.0-fluendo-mp3 telnetd"

packages_to_install=("${DEFAULT_PACKAGES_TO_INSTALL}")

packages_to_remove=("${DEFAULT_PACKAGES_TO_REMOVE}")

# Check for root user
if [[ "${EUID}" -ne 0 ]]; then
    printf "ERROR: This script needs to run as root.\n"
    exit 1
fi

usage_text() {
	printf 'Usage: %s [-k|--packages <arg>] [-q|--local-pip <arg>] [-n|--git-name <arg>] [-m|--git-email <arg>] [-l|--clean-packages <arg>] [-e|--extra-packages <arg>] [-u|--user <arg>] [-o|--(no-)google-chrome] [-v|--(no-)vscode] [-i|--(no-)vscode-insiders] [-y|--(no-)python-pip] [-r|--(no-)remove-global-pip] [-g|--(no-)git] [-f|--(no-)ufw] [-d|--(no-)docker-ce] [-c|--(no-)calibre] [-p|--(no-)pyenv] [-h|--help] <ubuntu_version>\n' "$SCRIPT_NAME"
}

readonly -f usage_text

# Created by argbash-init v2.9.0
# ARG_OPTIONAL_SINGLE([packages],[k])
# ARG_OPTIONAL_SINGLE([local-pip],[q])
# ARG_OPTIONAL_SINGLE([git-name],[n])
# ARG_OPTIONAL_SINGLE([git-email],[m])
# ARG_OPTIONAL_SINGLE([clean-packages],[l])
# ARG_OPTIONAL_SINGLE([extra-packages],[e])
# ARG_OPTIONAL_SINGLE([user],[u])
# ARG_OPTIONAL_BOOLEAN([google-chrome],[o])
# ARG_OPTIONAL_BOOLEAN([vscode],[v])
# ARG_OPTIONAL_BOOLEAN([vscode-insiders],[i])
# ARG_OPTIONAL_BOOLEAN([python-pip],[y])
# ARG_OPTIONAL_BOOLEAN([remove-global-pip],[r])
# ARG_OPTIONAL_BOOLEAN([git],[g])
# ARG_OPTIONAL_BOOLEAN([ufw],[f])
# ARG_OPTIONAL_BOOLEAN([docker-ce],[d])
# ARG_OPTIONAL_BOOLEAN([calibre],[c])
# ARG_OPTIONAL_BOOLEAN([pyenv],[p])
# ARG_POSITIONAL_SINGLE([ubuntu_version])
# ARG_DEFAULTS_POS()
# ARG_HELP([<The general help message of my script>])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}

readonly -f die

begins_with_short_option()
{
	local first_option all_short_options='kqnmleuoviyrgfdcph'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

readonly -f begins_with_short_option

print_help()
{
    printf 'Options:\n'
    printf "    --packages=<list> list of packages to install in quotation marks\n"
    printf "    --google-chrome: Install google-chrome\n"
    printf "    --vscode: Install Visual Studio Code\n"
    printf "    --vscode-insiders: Install Visual Studio Code Insiders \n"
    printf "    --python-pip: Installs python-pip and python3-pip\n"
    printf "    --local-pip=<user>: Installs pip locally to provided user. Implies --python-pip and --remove-global-pip.\n"
    printf "    --remove-global-pip: Removes globally installed python[3]-pip packages. Implies --python-pip and --local-pip.\n"
    printf "    --git: Installs git.\n"
    printf "    --git-name: Sets up global user name for git config. Implies --git. Requires --user=<system_user>.\n"
    printf "    --git-email: Sets up global user email for git config. Implies --git. Requires --user=<system_user>.\n"
    printf "    --clean-packages: List of packages to remove on top of default clean-up packages.\n"
    printf "    --extra-packages: List of additional packages to install on top of default packages.\n"
    printf "    --ufw: Install UFW firewall and set up the following default rules: deny incoming, allow outgoing, allow localhost 22, 3306 (mysql), 5432 (postgresql), 80 (http), 443 (https).\n"
    printf "    --docker-ce: Install Docker Community Edition (ensures removal of any docker dependency from APT package manager)\n"
    printf "    --calibre: Install Calibre EBook Reading Software.\n"
    printf "    --pyenv: Install Pyenv Python Version Management by using project pyenv-installer.\n"
    printf "    --user: Select user for configuration\n"
	printf '\t%s\n' "-h, --help: Prints help"
}

readonly -f print_help

readonly NUMBER_OF_ARGUMENTS=$#

if [[ "${NUMBER_OF_ARGUMENTS}" -eq 0 ]]; then
    usage_text
    printf "Error: Missing target ubuntu version. Please provide an Ubuntu version as an argument (e.g. '18.04' or '20.04').\n"
    print_help
    exit 1
fi

parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-k|--packages)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_packages="$2"
                packages_to_install=("$2")
				shift
				;;
			--packages=*)
				_arg_packages="${_key##--packages=}"
                packages_to_install=("${_key##--packages=}")
				;;
			-k*)
				_arg_packages="${_key##-k}"
                packages_to_install=("${_key##-k}")
				;;
			-q|--local-pip)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_python_pip=1
                _arg_remove_global_pip=1
				_arg_local_pip="$2"
				shift
				;;
			--local-pip=*)
                _arg_python_pip=1
                _arg_remove_global_pip=1
				_arg_local_pip="${_key##--local-pip=}"
				;;
			-q*)
                _arg_python_pip=1
                _arg_remove_global_pip=1
				_arg_local_pip="${_key##-q}"
				;;
			-n|--git-name)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_git=1
				_arg_git_name="$2"
				shift
				;;
			--git-name=*)
                _arg_git=1
				_arg_git_name="${_key##--git-name=}"
				;;
			-n*)
                _arg_git=1
				_arg_git_name="${_key##-n}"
				;;
			-m|--git-email)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_git=1
				_arg_git_email="$2"
				shift
				;;
			--git-email=*)
                _arg_git=1
				_arg_git_email="${_key##--git-email=}"
				;;
			-m*)
                _arg_git=1
				_arg_git_email="${_key##-m}"
				;;
			-l|--clean-packages)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_clean_packages="$2"
                for package in $2; do
                    packages_to_remove+=("$package")
                done
				shift
				;;
			--clean-packages=*)
				_arg_clean_packages="${_key##--clean-packages=}"
                for package in ${_key##--clean-packages=}; do
                    packages_to_remove+=("$package")
                done
				;;
			-l*)
				_arg_clean_packages="${_key##-l}"
                for package in ${_key##-l}; do
                    packages_to_remove+=("$package")
                done
				;;
			-e|--extra-packages)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_extra_packages="$2"
                for package in $2; do
                    packages_to_install+=("$package")
                done
				shift
				;;
			--extra-packages=*)
				_arg_extra_packages="${_key##--extra-packages=}"
                for package in ${_key##--extra-packages=}; do
                    packages_to_install+=("$package")
                done
				;;
			-e*)
				_arg_extra_packages="${_key##-e}"
                for package in ${_key##-e}; do
                    packages_to_install+=("$package")
                done
				;;
			-u|--user)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_user="$2"
				shift
				;;
			--user=*)
				_arg_user="${_key##--user=}"
				;;
			-u*)
				_arg_user="${_key##-u}"
				;;
			-o|--no-google-chrome|--google-chrome)
				_arg_google_chrome=1
				test "${1:0:5}" = "--no-" && unset _arg_google_chrome
				;;
			-o*)
				_arg_google_chrome=1
				_next="${_key##-o}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-o" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-v|--no-vscode|--vscode)
				_arg_vscode=1
				test "${1:0:5}" = "--no-" && unset _arg_vscode
				;;
			-v*)
				_arg_vscode=1
				_next="${_key##-v}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-v" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-i|--no-vscode-insiders|--vscode-insiders)
				_arg_vscode_insiders=1
				test "${1:0:5}" = "--no-" && unset _arg_vscode_insiders
				;;
			-i*)
				_arg_vscode_insiders=1
				_next="${_key##-i}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-i" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-y|--no-python-pip|--python-pip)
				_arg_python_pip=1
				test "${1:0:5}" = "--no-" && unset _arg_python_pip
				;;
			-y*)
				_arg_python_pip=1
				_next="${_key##-y}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-y" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-r|--no-remove-global-pip|--remove-global-pip)
                _arg_python_pip=1
                _arg_local_pip=1
				_arg_remove_global_pip=1
				test "${1:0:5}" = "--no-" && unset _arg_remove_global_pip
				;;
			-r*)
				_arg_remove_global_pip=1
				_next="${_key##-r}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-r" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-g|--no-git|--git)
				_arg_git=1
				test "${1:0:5}" = "--no-" && unset _arg_git && unset _arg_git_email && unset _arg_git_name
				;;
			-g*)
				_arg_git=1
				_next="${_key##-g}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-g" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-f|--no-ufw|--ufw)
				_arg_ufw=1
				test "${1:0:5}" = "--no-" && unset _arg_ufw
				;;
			-f*)
				_arg_ufw=1
				_next="${_key##-f}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-f" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-d|--no-docker-ce|--docker-ce)
				_arg_docker_ce=1
				test "${1:0:5}" = "--no-" && unset _arg_docker_ce
				;;
			-d*)
				_arg_docker_ce=1
				_next="${_key##-d}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-d" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-c|--no-calibre|--calibre)
				_arg_calibre=1
				test "${1:0:5}" = "--no-" && unset _arg_calibre
				;;
			-c*)
				_arg_calibre=1
				_next="${_key##-c}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-c" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-p|--no-pyenv|--pyenv)
				_arg_pyenv=1
				test "${1:0:5}" = "--no-" && unset _arg_pyenv
				;;
			-p*)
				_arg_pyenv=1
				_next="${_key##-p}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-p" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}

readonly -f parse_commandline

handle_passed_args_count()
{
	local _required_args_string="'ubuntu_version'"
	test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}

readonly -f handle_passed_args_count

assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_ubuntu_version "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

readonly -f assign_positional_args

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

if [[ -n ${_arg_user+defined} ]]; then
    HOMEDIR_USER="$(getent passwd "$_arg_user" | awk -F ':' '{print $6}')"
fi

if [[ -n ${_arg_git_name+defined} && -z ${_arg_user+defined} || ${_arg_git_email+defined} && -z ${_arg_user+defined} ]]; then
    echo "Argument Error: You need to specify a system user for whom to configure Git identity."
    exit 1
fi

if [[ -n ${VALIDATE_SSH_PORT+x} ]]; then
    number_regex='^[0-9]+$'
    if ! [[ $NEW_SSH_PORT =~ $number_regex ]]; then
        # Binary operator =~: the string to the right of the operator is a regular expression and  matched. The return value is 0 if the string matches the pattern, and 1 otherwise. If the regular expression is syntactically incorrect, the return value is 2. Same precedence as == and !=.
        echo "Warning: Input Error. New SSH port value '$NEW_SSH_PORT' is not numeric. Skipping changes to SSH port configuration." >&2
    elif [[ $NEW_SSH_PORT -eq 22 || ($NEW_SSH_PORT -gt 1024 && $NEW_SSH_PORT -lt 65535) ]]; then
        readonly CHANGE_SSH_PORT=1
    else
        echo "Warning: Input Error. New SSH port value '$NEW_SSH_PORT' is outside of valid range for SSH ports: 22,1025~65534. Skipping changes to SSH port configuration." >&2
    fi
fi

if [[ -n ${_arg_python_pip+defined} ]]; then
    if [[ "${ubuntu_version}" =~ 20.04 ]]; then
        packages_to_install+=('python2' 'python3-pip' 'python3-venv')
    else
        packages_to_install+=('python-pip' 'python3-pip' 'python3-venv')
    fi
fi

if [[ -n ${_arg_python_pip+defined} ]]; then
    packages_to_install+=('git')
fi

if [[ -n ${_arg_pyenv+defined} ]]; then
    packages_to_install+=('make' 'build-essential' 'libssl-dev' 'zlib1g-dev' 'libbz2-dev' 'libreadline-dev' 'libsqlite3-dev' 'wget' 'curl' 'llvm' 'libncurses5-dev' 'xz-utils' 'libxml2-dev' 'libxmlsec1-dev' 'libffi-dev' 'liblzma-dev' 'tk-dev')
fi

if [[ -n ${_arg_remove_global_pip+defined} ]]; then
    if [[ "${_arg_ubuntu_version}" == "20.04" ]]; then
        packages_to_remove+=('python3-pip')
    else
        packages_to_remove+=('python-pip' 'python3-pip')
    fi
fi

if [[ -n ${_arg_ufw+defined} ]]; then
    packages_to_install+=('ufw')
fi

if [[ -n ${_arg_vscode+defined} || -n ${VSCODE_INSIDERS+x} || -n ${_arg_docker_ce+defined} || -n ${_arg_google_chrome+defined} || -n ${CALIBRE+x} ]]; then
    packages_to_install+=('curl coreutils apt-transport-https ca-certificates wget gnupg-agent software-properties-common xdg-utils xz-utils' 'tk-dev')
fi

add-apt-repository universe
add-apt-repository multiverse

apt-get update

DEBIAN_FRONTEND=noninteractive apt-get full-upgrade -y

# Accept Virtualbox License
if [[ " ${packages_to_install[@]} " =~ " virtualbox-ext-pack " ]]; then
    echo virtualbox-ext-pack virtualbox-ext-pack/license select true | debconf-set-selections
fi

DEBIAN_FRONTEND=noninteractive apt-get install -y "${packages_to_install[@]}"

if [[ -n ${_arg_git_name+defined} ]]; then
    sudo -u "$_arg_user" git config --global user.name "${_arg_git_name}"
fi

if [[ -n ${_arg_git_email+defined} ]]; then
    sudo -u "$_arg_user" git config --global user.email "${_arg_git_email}"
fi

readonly SSHD_CONFIG_FILE="/etc/ssh/sshd_config"
if [[ -e $SSHD_CONFIG_FILE ]]; then
    GREP_SSH_PORT_CONFIG=$(grep -E "^[[:space:]]*Port([[:space:]]*|[=]?)" $SSHD_CONFIG_FILE | awk '{$1=$1;print}')
    ## GNU/POSIX extensions to regular expressions. Source: Chapter 3 `sed` FAQ. http://sed.sourceforge.net/sedfaq3.html
    # [[:alnum:]]  - [A-Za-z0-9]     Alphanumeric characters
    # [[:alpha:]]  - [A-Za-z]        Alphabetic characters
    # [[:blank:]]  - [ \x09]         Space or tab characters only
    # [[:cntrl:]]  - [\x00-\x19\x7F] Control characters
    # [[:digit:]]  - [0-9]           Numeric characters
    # [[:graph:]]  - [!-~]           Printable and visible characters
    # [[:lower:]]  - [a-z]           Lower-case alphabetic characters
    # [[:print:]]  - [ -~]           Printable (non-Control) characters
    # [[:punct:]]  - [!-/:-@[-`{-~]  Punctuation characters
    # [[:space:]]  - [ \t\v\f]       All whitespace chars
    # [[:upper:]]  - [A-Z]           Upper-case alphabetic characters
    # [[:xdigit:]] - [0-9a-fA-F]     Hexadecimal digit characters
    readonly GREP_SSH_PORT_CONFIG
    if [[ -z ${GREP_SSH_PORT_CONFIG+x} ]]; then
        current_ssh_port=22
    elif [[ -z "${GREP_SSH_PORT_CONFIG##*'='*}" ]]; then
        # if configuration is set up with equal sign, e.g. Port=22
        current_ssh_port=$(echo "$GREP_SSH_PORT_CONFIG" | cut -d"=" -f2 | awk '{$1=$1;print}')
    else
        current_ssh_port=$(echo "$GREP_SSH_PORT_CONFIG" | awk '{print $2}')
    fi
fi

if [[ -n ${CHANGE_SSH_PORT+x} ]]; then
    if [[ -e $SSHD_CONFIG_FILE ]]; then
        :
    else
        echo "Warning: System Error. Could not find SSHD configuration file at '$SSHD_CONFIG_FILE'. Skipping changes to SSH port configuration." >&2
    fi
fi

readonly ufwsectionlockfile="/var/lock/$SCRIPT_NAME.ufw.lock"
ufwsection_unlock() {
    returncode=$?;
    rm -f "${ufwsectionlockfile}";
    exit ${returncode};
}
readonly -f ufwsection_unlock
if [[ -n ${_arg_ufw+defined} ]]; then
    if (
        set -o noclobber
        echo "$$" >"$ufwsectionlockfile"
    ) 2>/dev/null; then
        trap "ufwsection_unlock" INT TERM EXIT
        ufw --force reset
        ufw default deny incoming
        ufw default allow outgoing
        # SSH
        if [[ -n ${current_ssh_port+x} ]]; then
            ufw allow in on lo to 0.0.0.0 port "${current_ssh_port}"
            ufw allow out on lo to 0.0.0.0 port "${current_ssh_port}"
        else
            ufw allow in on lo to 0.0.0.0 port 22
            ufw allow out on lo to 0.0.0.0 port 22
        fi
        # HTTP
        ufw allow in on lo to 0.0.0.0 port 80
        ufw allow out on lo to 0.0.0.0 port 80
        # HTTPS
        ufw allow in on lo to 0.0.0.0 port 443
        ufw allow out on lo to 0.0.0.0 port 443
        # MySQL
        ufw allow in on lo to 0.0.0.0 port 3306
        ufw allow out on lo to 0.0.0.0 port 3306
        # PostgreSQL
        ufw allow in on lo to 0.0.0.0 port 5432
        ufw allow out on lo to 0.0.0.0 port 5432
        ufw --force disable
        ufw --force enable
        rm -f "${ufwsectionlockfile}"
        trap - INT TERM EXIT
    else
        echo "Failed to acquire lockfile: Held by $ufwsectionlockfile."
    fi
fi

if [[ -n ${_arg_google_chrome+defined} ]]; then
    TEMP_GOOGLE_CHROME_DEB="$(mktemp).deb"
    googlechromesection_unlock() {
        returncode=$?;
        rm -f "${TEMP_GOOGLE_CHROME_DEB}";
        exit ${returncode};
    }
    trap "googlechromesection_unlock" INT TERM EXIT
    curl -qo "${TEMP_GOOGLE_CHROME_DEB}" 'https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb' &&
        DEBIAN_FRONTEND=noninteractive apt-get install -y "${TEMP_GOOGLE_CHROME_DEB}" &&
        rm -f "${TEMP_GOOGLE_CHROME_DEB}"
    trap - INT TERM EXIT
fi

if [[ -n ${_arg_vscode+defined} || -n ${_arg_vscode_insiders+defined} ]]; then
    curl -q https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor >packages.microsoft.gpg
    install -o root -g root -m 644 packages.microsoft.gpg /usr/share/keyrings/
    sh -c 'echo "deb [arch=amd64 signed-by=/usr/share/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'
fi

if [[ -n ${_arg_vscode+defined} ]]; then
    apt-get update
    DEBIAN_FRONTEND=noninteractive apt-get install -y code
fi

if [[ -n ${_arg_vscode_insiders+defined} ]]; then
    apt-get update
    DEBIAN_FRONTEND=noninteractive apt-get install -y code-insiders
fi

if [[ -n ${_arg_docker_ce+defined} ]]; then
    DEBIAN_FRONTEND=noninteractive apt-get remove -y docker docker-engine docker.io containerd runc
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
    apt-key fingerprint 0EBFCD88 | wc -l | grep -v 0 &>/dev/null && DEBIAN_FRONTEND=noninteractive add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    apt-get update
    DEBIAN_FRONTEND=noninteractive apt-get install -y docker-ce docker-ce-cli containerd.io
    if [[ -n ${_arg_user+defined} ]]; then
        usermod --append --groups docker "$_arg_user"
    fi
fi

if [[ -n ${_arg_calibre+defined} ]]; then
    wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sh /dev/stdin install_dir=/opt
fi

if [[ -n ${_arg_pyenv+defined} ]]; then
    curl -s -S -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash -e
fi

DEBIAN_FRONTEND=noninteractive apt-get remove -y "${packages_to_remove[@]}"

### setxkbmap
## Check current options
# setxkbmap -query
## Undo any previous options (pass empty argument list). Source https://unix.stackexchange.com/questions/229555/how-do-i-unset-an-option-in-xkbmap
## Set scroll lock as compose key
# list of key values here: https://gist.github.com/jatcwang/ae3b7019f219b8cdc6798329108c9aee
# list of pnemonic key combinations in: /usr/share/X11/locale/en_US.UTF-8/Compose
# or here: https://cgit.freedesktop.org/xorg/lib/libX11/tree/nls/en_US.UTF-8/Compose.pre
# Source with short explanation here: https://superuser.com/questions/74763/how-to-type-unicode-characters-in-kde/78724#78724
# Source with longer explanation here: http://canonical.org/~kragen/setting-up-keyboard.html
# Useful XCompose GitHub here: https://github.com/kragen/XCompose
if [[ -n ${_arg_user+defined} ]]; then
    sudo -u "$_arg_user" /usr/bin/setxkbmap -option compose:rctrl
    LINES_PROFILE=('# Enable custom Compose sequences on login' '/usr/bin/setxkbmap -option compose:rctrl')
    for line in "${LINES_PROFILE[@]}"; do
        grep -qxF -- "$line" "${HOMEDIR_USER}/.profile" 2>/dev/null || echo "$line" >>"${HOMEDIR_USER}/.profile"
    done
    LINES_XCOMPOSE=('# This file defines custom Compose sequences for Unicode characters' '# Import default rules from the system Compose file:' 'include "/usr/share/X11/locale/es_ES.UTF-8/Compose"')
    for line in "${LINES_XCOMPOSE[@]}"; do
        grep -qxF -- "$line" "${HOMEDIR_USER}/.XCompose" 2>/dev/null || echo "$line" >>"${HOMEDIR_USER}/.XCompose"
    done
    chown "$_arg_user:$_arg_user" "${HOMEDIR_USER}/.XCompose"
    chown "$_arg_user:$_arg_user" "${HOMEDIR_USER}/.profile"
fi

flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
if [[ -n ${_arg_user+defined} ]]; then
    sudo -u "${_arg_user}" flatpak remote-add --if-not-exists --user flathub https://dl.flathub.org/repo/flathub.flatpakrepo
    sudo -u "${_arg_user}" flatpak install -y --user "${DEFAULT_FLATPAK_PACKAGES_INSTALL}"
else
    flatpak install -y ${DEFAULT_FLATPAK_PACKAGES_INSTALL}
fi

if [[ -n ${DEFAULT_SNAP_PACKAGES_INSTALL_CLASSIC} ]]; then
    snap install --classic ${DEFAULT_SNAP_PACKAGES_INSTALL_CLASSIC}
fi

if [[ $DEFAULT_SNAP_PACKAGES_INSTALL_CLASSIC =~ "helm" ]]; then
    snap run helm repo add stable https://kubernetes-charts.storage.googleapis.com/
fi

if [[ -n ${DEFAULT_SNAP_PACKAGES_INSTALL} ]]; then
    snap install "${DEFAULT_SNAP_PACKAGES_INSTALL}"
fi

if [[ -n ${_arg_python_pip+defined} ]]; then
    if [[ "${_arg_ubuntu_version}" =~ 20.04 ]]; then
        curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        python2 get-pip.py
    fi
fi

## Apache Example: batch apply atomic changes in directory
# cp -a /var/www /var/www-tmp
# find /var/www-tmp -type f -name "*.html" -print0 | xargs -0 perl -pi -e 's/.conf/.com/'
# mv /var/www /var/www-old
# mv /var/www-tmp /var/www
# Apache opens the files on every request, otherwise processes should be restarted to apply changes
